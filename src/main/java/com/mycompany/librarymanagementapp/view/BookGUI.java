/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.librarymanagementapp.view;

/**
 *
 * @author AnNguyen
 */
import com.mycompany.librarymanagementapp.controller.*;
import com.mycompany.librarymanagementapp.dao.BookDAO;
import com.mycompany.librarymanagementapp.dao.CategoryDAO;
import com.mycompany.librarymanagementapp.dao.PublisherDAO;
import com.mycompany.librarymanagementapp.model.Book;
import com.mycompany.librarymanagementapp.model.Category;
import com.mycompany.librarymanagementapp.model.Publisher;
import com.mycompany.librarymanagementapp.utils.SessionManager;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.swing.*;
import javax.swing.table.DefaultTableModel;

public class BookGUI extends javax.swing.JFrame {

    /**
     * Creates new form BookGUI
     */
    private String role = SessionManager.getCurrentUserRole();
    private BookController controller;

    public BookGUI() {
        this.controller = new BookController(this);
        initComponents();
        loadInfoToComboBox();
        loadDataFromDataBase();
        setupPopupMenu();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jDialogItemUpdate = new javax.swing.JDialog();
        jPanelItemUpdate = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jTextFieldtitleUD = new javax.swing.JTextField();
        jTextFieldauthorUD = new javax.swing.JTextField();
        jComboBoxcategoryUD = new javax.swing.JComboBox<>();
        jComboBoxpublisherUD = new javax.swing.JComboBox<>();
        jTextFieldyearPublishedUD = new javax.swing.JTextField();
        jTextFieldquantityUD = new javax.swing.JTextField();
        jButtonUpdate = new javax.swing.JButton();
        jDialogItemAdd = new javax.swing.JDialog();
        jPanelItemAdd = new javax.swing.JPanel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jTextFieldtitle = new javax.swing.JTextField();
        jTextFieldauthor = new javax.swing.JTextField();
        jComboBoxcategory = new javax.swing.JComboBox<>();
        jComboBoxpublisher = new javax.swing.JComboBox<>();
        jTextFieldyearPublished = new javax.swing.JTextField();
        jTextFieldquantity = new javax.swing.JTextField();
        jButtonAdd = new javax.swing.JButton();
        jDialogCategoryEdit = new javax.swing.JDialog();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTableCategoryEdit = new javax.swing.JTable();
        jPanel2 = new javax.swing.JPanel();
        jLabel16 = new javax.swing.JLabel();
        jTextFieldAddCategory = new javax.swing.JTextField();
        jButtonAddCateGory = new javax.swing.JButton();
        jLabel18 = new javax.swing.JLabel();
        jDialogPublisherEdit = new javax.swing.JDialog();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTablePublisherEdit = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        jLabel15 = new javax.swing.JLabel();
        jTextFieldAddPublisher = new javax.swing.JTextField();
        jButtonAddPublisher = new javax.swing.JButton();
        jLabel17 = new javax.swing.JLabel();
        jMenuDeleteCategory = new javax.swing.JMenuItem();
        jMenuDeletePublisher = new javax.swing.JMenuItem();
        jMenuItemAdd = new javax.swing.JMenuItem();
        jButtonBack = new javax.swing.JButton();
        jPanelSearch = new javax.swing.JPanel();
        jLabelBookID = new javax.swing.JLabel();
        jLabelTiTle = new javax.swing.JLabel();
        jLabelAuthor = new javax.swing.JLabel();
        jTextFieldBookID = new javax.swing.JTextField();
        jTextFieldTitle = new javax.swing.JTextField();
        jTextFieldAuthor = new javax.swing.JTextField();
        jLabelCategory = new javax.swing.JLabel();
        jComboBoxCategory = new javax.swing.JComboBox<>();
        jLabelPublisher = new javax.swing.JLabel();
        jComboBoxPublisher = new javax.swing.JComboBox<>();
        jButtonSearch = new javax.swing.JButton();
        jScrollPaneBookInfo = new javax.swing.JScrollPane();
        jScrollPaneTable = new javax.swing.JScrollPane();
        jTableBookInfo = new javax.swing.JTable();
        jButtonEdit = new javax.swing.JButton();

        jLabel2.setText("Tiêu đề");
        jLabel2.setPreferredSize(new java.awt.Dimension(80, 30));

        jLabel3.setText("Tác giả");
        jLabel3.setPreferredSize(new java.awt.Dimension(80, 30));

        jLabel5.setText("Thể loại");
        jLabel5.setPreferredSize(new java.awt.Dimension(80, 30));

        jLabel4.setText("Nhà xuất bản");
        jLabel4.setPreferredSize(new java.awt.Dimension(80, 30));

        jLabel14.setText("Năm xuất bản");
        jLabel14.setPreferredSize(new java.awt.Dimension(80, 30));

        jLabel6.setText("Số lượng");
        jLabel6.setPreferredSize(new java.awt.Dimension(80, 30));

        jTextFieldtitleUD.setPreferredSize(new java.awt.Dimension(290, 30));

        jTextFieldauthorUD.setPreferredSize(new java.awt.Dimension(290, 30));

        jComboBoxcategoryUD.setPreferredSize(new java.awt.Dimension(290, 30));

        jComboBoxpublisherUD.setPreferredSize(new java.awt.Dimension(290, 30));

        jTextFieldyearPublishedUD.setPreferredSize(new java.awt.Dimension(290, 30));

        jTextFieldquantityUD.setPreferredSize(new java.awt.Dimension(290, 30));

        jButtonUpdate.setText("Cập nhật");

        javax.swing.GroupLayout jPanelItemUpdateLayout = new javax.swing.GroupLayout(jPanelItemUpdate);
        jPanelItemUpdate.setLayout(jPanelItemUpdateLayout);
        jPanelItemUpdateLayout.setHorizontalGroup(
            jPanelItemUpdateLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelItemUpdateLayout.createSequentialGroup()
                .addGap(51, 51, 51)
                .addGroup(jPanelItemUpdateLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelItemUpdateLayout.createSequentialGroup()
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jComboBoxpublisherUD, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelItemUpdateLayout.createSequentialGroup()
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jTextFieldauthorUD, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelItemUpdateLayout.createSequentialGroup()
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jTextFieldtitleUD, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanelItemUpdateLayout.createSequentialGroup()
                        .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jComboBoxcategoryUD, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelItemUpdateLayout.createSequentialGroup()
                        .addGroup(jPanelItemUpdateLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel14, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanelItemUpdateLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jTextFieldquantityUD, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jTextFieldyearPublishedUD, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanelItemUpdateLayout.createSequentialGroup()
                                .addGap(11, 11, 11)
                                .addComponent(jButtonUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addGap(49, 49, 49))
        );
        jPanelItemUpdateLayout.setVerticalGroup(
            jPanelItemUpdateLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelItemUpdateLayout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addGroup(jPanelItemUpdateLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextFieldtitleUD, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanelItemUpdateLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextFieldauthorUD, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanelItemUpdateLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBoxcategoryUD, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanelItemUpdateLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBoxpublisherUD, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanelItemUpdateLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel14, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextFieldyearPublishedUD, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanelItemUpdateLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextFieldquantityUD, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(32, 32, 32)
                .addComponent(jButtonUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(46, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jDialogItemUpdateLayout = new javax.swing.GroupLayout(jDialogItemUpdate.getContentPane());
        jDialogItemUpdate.getContentPane().setLayout(jDialogItemUpdateLayout);
        jDialogItemUpdateLayout.setHorizontalGroup(
            jDialogItemUpdateLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jDialogItemUpdateLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanelItemUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jDialogItemUpdateLayout.setVerticalGroup(
            jDialogItemUpdateLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jDialogItemUpdateLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanelItemUpdate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        jLabel8.setText("Tiêu đề");
        jLabel8.setPreferredSize(new java.awt.Dimension(80, 30));

        jLabel9.setText("Tác giả");
        jLabel9.setPreferredSize(new java.awt.Dimension(80, 30));

        jLabel10.setText("Thể loại");
        jLabel10.setPreferredSize(new java.awt.Dimension(80, 30));

        jLabel11.setText("Nhà xuất bản");
        jLabel11.setPreferredSize(new java.awt.Dimension(80, 30));

        jLabel12.setText("Số lượng");
        jLabel12.setPreferredSize(new java.awt.Dimension(80, 30));

        jLabel13.setText("Năm xuất bản");

        jTextFieldtitle.setPreferredSize(new java.awt.Dimension(290, 30));

        jTextFieldauthor.setPreferredSize(new java.awt.Dimension(290, 30));

        jComboBoxcategory.setPreferredSize(new java.awt.Dimension(290, 30));

        jComboBoxpublisher.setPreferredSize(new java.awt.Dimension(290, 30));

        jTextFieldyearPublished.setPreferredSize(new java.awt.Dimension(290, 30));

        jButtonAdd.setText("THÊM");
        jButtonAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAddActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanelItemAddLayout = new javax.swing.GroupLayout(jPanelItemAdd);
        jPanelItemAdd.setLayout(jPanelItemAddLayout);
        jPanelItemAddLayout.setHorizontalGroup(
            jPanelItemAddLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelItemAddLayout.createSequentialGroup()
                .addGap(47, 47, 47)
                .addGroup(jPanelItemAddLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelItemAddLayout.createSequentialGroup()
                        .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jComboBoxcategory, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelItemAddLayout.createSequentialGroup()
                        .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jTextFieldauthor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelItemAddLayout.createSequentialGroup()
                        .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jTextFieldtitle, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanelItemAddLayout.createSequentialGroup()
                        .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jComboBoxpublisher, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelItemAddLayout.createSequentialGroup()
                        .addGroup(jPanelItemAddLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanelItemAddLayout.createSequentialGroup()
                                .addComponent(jLabel13)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelItemAddLayout.createSequentialGroup()
                                .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                        .addGroup(jPanelItemAddLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jTextFieldyearPublished, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jTextFieldquantity, javax.swing.GroupLayout.PREFERRED_SIZE, 290, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(53, 53, 53))
            .addGroup(jPanelItemAddLayout.createSequentialGroup()
                .addGap(152, 152, 152)
                .addComponent(jButtonAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanelItemAddLayout.setVerticalGroup(
            jPanelItemAddLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelItemAddLayout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(jPanelItemAddLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextFieldtitle, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanelItemAddLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextFieldauthor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanelItemAddLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBoxcategory, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanelItemAddLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBoxpublisher, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanelItemAddLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextFieldyearPublished, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanelItemAddLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextFieldquantity, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(31, 31, 31)
                .addComponent(jButtonAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(34, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jDialogItemAddLayout = new javax.swing.GroupLayout(jDialogItemAdd.getContentPane());
        jDialogItemAdd.getContentPane().setLayout(jDialogItemAddLayout);
        jDialogItemAddLayout.setHorizontalGroup(
            jDialogItemAddLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jDialogItemAddLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanelItemAdd, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jDialogItemAddLayout.setVerticalGroup(
            jDialogItemAddLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jDialogItemAddLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanelItemAdd, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        jTableCategoryEdit.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "ID", "Thể loại"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jTableCategoryEdit);

        jLabel16.setText("Thêm thể loại mới");

        jButtonAddCateGory.setText("Thêm");
        jButtonAddCateGory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAddCateGoryActionPerformed(evt);
            }
        });

        jLabel18.setText("Tên thể loại");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(41, 41, 41)
                        .addComponent(jLabel18, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextFieldAddCategory, javax.swing.GroupLayout.PREFERRED_SIZE, 328, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(195, 195, 195)
                        .addComponent(jButtonAddCateGory, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(186, 186, 186)
                        .addComponent(jLabel16, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel16)
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextFieldAddCategory, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel18, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jButtonAddCateGory, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(14, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jDialogCategoryEditLayout = new javax.swing.GroupLayout(jDialogCategoryEdit.getContentPane());
        jDialogCategoryEdit.getContentPane().setLayout(jDialogCategoryEditLayout);
        jDialogCategoryEditLayout.setHorizontalGroup(
            jDialogCategoryEditLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jDialogCategoryEditLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jDialogCategoryEditLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 488, Short.MAX_VALUE))
                .addContainerGap())
        );
        jDialogCategoryEditLayout.setVerticalGroup(
            jDialogCategoryEditLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jDialogCategoryEditLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 346, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTablePublisherEdit.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "ID", "Nhà xuất bản"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(jTablePublisherEdit);

        jLabel15.setText("Thêm nhà xuất bản");

        jButtonAddPublisher.setText("Thêm");
        jButtonAddPublisher.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAddPublisherActionPerformed(evt);
            }
        });

        jLabel17.setText("Tên nhà xuất bản");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel17)
                .addGap(18, 18, 18)
                .addComponent(jTextFieldAddPublisher, javax.swing.GroupLayout.PREFERRED_SIZE, 347, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(20, 20, 20))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(204, 204, 204)
                        .addComponent(jButtonAddPublisher, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(198, 198, 198)
                        .addComponent(jLabel15)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addComponent(jLabel15)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 27, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextFieldAddPublisher, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel17, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jButtonAddPublisher, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(28, 28, 28))
        );

        javax.swing.GroupLayout jDialogPublisherEditLayout = new javax.swing.GroupLayout(jDialogPublisherEdit.getContentPane());
        jDialogPublisherEdit.getContentPane().setLayout(jDialogPublisherEditLayout);
        jDialogPublisherEditLayout.setHorizontalGroup(
            jDialogPublisherEditLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jDialogPublisherEditLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jDialogPublisherEditLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 506, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jDialogPublisherEditLayout.setVerticalGroup(
            jDialogPublisherEditLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jDialogPublisherEditLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 363, Short.MAX_VALUE)
                .addContainerGap())
        );

        jMenuDeleteCategory.setText("Xóa");
        jMenuDeleteCategory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuDeleteCategoryActionPerformed(evt);
            }
        });

        jMenuDeletePublisher.setText("Xóa");
        jMenuDeletePublisher.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuDeletePublisherActionPerformed(evt);
            }
        });

        jMenuItemAdd.setText("Thêm sách");
        jMenuItemAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemAddActionPerformed(evt);
            }
        });

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Sách");

        jButtonBack.setText("TRỞ VỀ");
        jButtonBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonBackActionPerformed(evt);
            }
        });

        jPanelSearch.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED, null, new java.awt.Color(255, 255, 255), null, null));

        jLabelBookID.setText("Mã sách");
        jLabelBookID.setPreferredSize(new java.awt.Dimension(85, 30));

        jLabelTiTle.setText("Tiêu đề");
        jLabelTiTle.setPreferredSize(new java.awt.Dimension(85, 30));

        jLabelAuthor.setText("Tác giả");
        jLabelAuthor.setPreferredSize(new java.awt.Dimension(85, 30));

        jTextFieldBookID.setPreferredSize(new java.awt.Dimension(205, 30));

        jTextFieldTitle.setPreferredSize(new java.awt.Dimension(205, 30));

        jTextFieldAuthor.setPreferredSize(new java.awt.Dimension(205, 30));

        jLabelCategory.setText("Thể loại");
        jLabelCategory.setPreferredSize(new java.awt.Dimension(85, 30));

        jComboBoxCategory.setPreferredSize(new java.awt.Dimension(205, 30));

        jLabelPublisher.setText("Nhà xuất bản");
        jLabelPublisher.setPreferredSize(new java.awt.Dimension(85, 30));

        jComboBoxPublisher.setPreferredSize(new java.awt.Dimension(205, 30));

        jButtonSearch.setText("Tìm kiếm");
        jButtonSearch.setPreferredSize(new java.awt.Dimension(90, 30));
        jButtonSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSearchActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanelSearchLayout = new javax.swing.GroupLayout(jPanelSearch);
        jPanelSearch.setLayout(jPanelSearchLayout);
        jPanelSearchLayout.setHorizontalGroup(
            jPanelSearchLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelSearchLayout.createSequentialGroup()
                .addGap(59, 59, 59)
                .addGroup(jPanelSearchLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabelTiTle, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelAuthor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelBookID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelSearchLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jTextFieldAuthor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextFieldTitle, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextFieldBookID, javax.swing.GroupLayout.PREFERRED_SIZE, 205, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 115, Short.MAX_VALUE)
                .addGroup(jPanelSearchLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabelPublisher, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabelCategory, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelSearchLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jComboBoxCategory, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jComboBoxPublisher, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanelSearchLayout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addComponent(jButtonSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(59, Short.MAX_VALUE))
        );
        jPanelSearchLayout.setVerticalGroup(
            jPanelSearchLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelSearchLayout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addGroup(jPanelSearchLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelBookID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextFieldBookID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelCategory, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBoxCategory, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 42, Short.MAX_VALUE)
                .addGroup(jPanelSearchLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelTiTle, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextFieldTitle, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabelPublisher, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBoxPublisher, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 42, Short.MAX_VALUE)
                .addGroup(jPanelSearchLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelAuthor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextFieldAuthor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(44, Short.MAX_VALUE))
        );

        jTableBookInfo.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Mã sách", "Tiêu đề", "Tác giả", "Thể loại", "Nhà xuất bản", "Năm xuất bản", "Số lượng"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPaneTable.setViewportView(jTableBookInfo);
        jTableBookInfo.getAccessibleContext().setAccessibleParent(jScrollPaneBookInfo);

        jScrollPaneBookInfo.setViewportView(jScrollPaneTable);

        jButtonEdit.setText("Chỉnh sửa");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jPanelSearch, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jScrollPaneBookInfo))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButtonBack, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButtonEdit, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jButtonBack, javax.swing.GroupLayout.DEFAULT_SIZE, 41, Short.MAX_VALUE)
                    .addComponent(jButtonEdit, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(12, 12, 12)
                .addComponent(jPanelSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPaneBookInfo, javax.swing.GroupLayout.DEFAULT_SIZE, 305, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private Map<String, Category> MapCategory = new HashMap<>();
    private Map<String, Publisher> MapPublisher = new HashMap<>();

    public void loadInfoToComboBox() {
        CategoryDAO categoryDAO = new CategoryDAO();
        List<Category> categories = categoryDAO.getAllCategories();

        // Xóa dữ liệu cũ trong JComboBox và Map
        MapCategory.clear();
        jComboBoxCategory.removeAllItems();

        jComboBoxCategory.addItem("Tất cả");
        MapCategory.put("Tất cả", null); // "Tất cả" ánh xạ với null

        // Thêm dữ liệu mới
        if (categories != null) {
            for (Category category : categories) {
                String categoryName = category.getCategory(); // Lấy tên thể loại
                jComboBoxCategory.addItem(categoryName);
                MapCategory.put(categoryName, category); // Lưu ánh xạ
            }
        }
        PublisherDAO publisherDAO = new PublisherDAO();
        List<Publisher> publishers = publisherDAO.getAllPublishers();
        // Xóa dữ liệu cũ trong JComboBox và Map
        MapPublisher.clear();
        jComboBoxPublisher.removeAllItems();

        jComboBoxPublisher.addItem("Tất cả");
        MapPublisher.put("Tất cả", null); // "Tất cả" ánh xạ với null

        // Thêm dữ liệu mới
        if (publishers != null) {
            for (Publisher publisher : publishers) {
                String publisherName = publisher.getPublisherName(); // Lấy tên nhà xuất bản
                jComboBoxPublisher.addItem(publisherName);
                MapPublisher.put(publisherName, publisher); // Lưu ánh xạ
            }
        }
    }

    private void loadDataFromDataBase() {

        DefaultTableModel tableModel = (DefaultTableModel) jTableBookInfo.getModel();

        BookDAO bookDao = new BookDAO();
        List<Book> books = bookDao.getAllBooks();

        for (Book book : books) {
            Object[] row = new Object[7];
            row[0] = book.getBookId();
            row[1] = book.getTitle();
            row[2] = book.getAuthor();
            row[3] = book.getCategory();
            row[4] = book.getPublisher();
            row[5] = book.getYearPublished();
            row[6] = book.getQuantity();
            tableModel.addRow(row);
        }

    }

    private void setupPopupMenu() {

        JPopupMenu menuEdit = new JPopupMenu();

        JMenuItem editCategoryItem = new JMenuItem("Chỉnh sửa thể loại");
        editCategoryItem.addActionListener(evt -> {
            showEditCategoryDialog();// Hiển thị Dialog chỉnh sửa thể loại   
            loadCategoriesToTable();// Tải danh sách thể loại vào bảng
            setupCategoryTablePopupMenu();// Cài đặt menu chuột phải cho bảng thể loại
        });

        JMenuItem editPublisherItem = new JMenuItem("Chỉnh sửa nhà xuất bản");
        editPublisherItem.addActionListener(evt -> {
            showEditPublisherDialog();      // Hiển thị Dialog
            loadPublishersToTable();       // Tải dữ liệu vào bảng
            setupPublisherTablePopupMenu(); // Cài đặt menu chuột phải
        });

        menuEdit.add(jMenuItemAdd);
        menuEdit.add(editCategoryItem);
        menuEdit.add(editPublisherItem);

        jButtonEdit.addActionListener(evt -> {
            menuEdit.show(jButtonEdit, jButtonEdit.getWidth() / 2, jButtonEdit.getHeight() / 2);
        });

        // Tạo và gán JPopupMenu vào jTableBookInfo
        JPopupMenu popupMenu = new JPopupMenu();
        JMenuItem menuItemDelete = new JMenuItem("Xóa sách");
        JMenuItem menuItemUpdate = new JMenuItem("Cập nhật thông tin sách");
        popupMenu.add(menuItemDelete);
        popupMenu.add(menuItemUpdate);

        jTableBookInfo.setComponentPopupMenu(popupMenu);

        // Xử lý sự kiện cho mục "Xóa sách"
        menuItemDelete.addActionListener(evt -> {
            if (hasDeletePermission(role)) {
                int selectedRow = jTableBookInfo.getSelectedRow();

                if (selectedRow != -1) {
                    if (confirmDelete()) {
                        // Lấy ID sách từ dòng được chọn
                        String bookID = jTableBookInfo.getValueAt(selectedRow, 0).toString();
                        deleteBook(Integer.parseInt(bookID), selectedRow);
                    }
                }
            } else {
                JOptionPane.showMessageDialog(
                        this,
                        "Bạn không có quyền này!",
                        "Thông báo",
                        JOptionPane.ERROR_MESSAGE
                );
            }
        });

        // Xử lý sự kiện cho mục "Cập nhật thông tin sách"
        menuItemUpdate.addActionListener(evt -> {
            int selectedRow = jTableBookInfo.getSelectedRow();
            if (selectedRow != -1) {
                try {
                    // Lấy thông tin từ dòng được chọn trong bảng
                    int bookID = Integer.parseInt(jTableBookInfo.getValueAt(selectedRow, 0).toString());
                    String title = jTableBookInfo.getValueAt(selectedRow, 1).toString();
                    String author = jTableBookInfo.getValueAt(selectedRow, 2).toString();
                    String categoryName = jTableBookInfo.getValueAt(selectedRow, 3).toString();
                    String publisherName = jTableBookInfo.getValueAt(selectedRow, 4).toString();
                    int yearPublished = Integer.parseInt(jTableBookInfo.getValueAt(selectedRow, 5).toString());
                    int quantity = Integer.parseInt(jTableBookInfo.getValueAt(selectedRow, 6).toString());

                    controller.updateBook(bookID, title, author, categoryName, publisherName, yearPublished, quantity);

                } catch (Exception ex) {
                    JOptionPane.showMessageDialog(BookGUI.this, "Đã xảy ra lỗi khi thu thập thông tin sách!", "Lỗi", JOptionPane.ERROR_MESSAGE);
                    ex.printStackTrace();
                }
            } else {
                JOptionPane.showMessageDialog(BookGUI.this, "Vui lòng chọn một dòng để cập nhật!", "Thông báo", JOptionPane.WARNING_MESSAGE);
            }
        });
    }
/// -----Xử lý sự kiện Chỉnh sửa thể loại và NXB-----

    private void showEditCategoryDialog() {
        jDialogCategoryEdit.setTitle("Chỉnh sửa thể loại");
        jDialogCategoryEdit.setSize(500, 400);
        jDialogCategoryEdit.setLocationRelativeTo(this);
        jDialogCategoryEdit.setVisible(true);
    }

    private void loadCategoriesToTable() {
        DefaultTableModel model = (DefaultTableModel) jTableCategoryEdit.getModel();
        model.setRowCount(0);

        CategoryDAO categoryDAO = new CategoryDAO();
        List<Category> categories = categoryDAO.getAllCategories();

        for (Category category : categories) {
            model.addRow(new Object[]{category.getCategoryId(), category.getCategory()});
        }
    }

    private void setupCategoryTablePopupMenu() {
        JPopupMenu categoryPopupMenu = new JPopupMenu();
        categoryPopupMenu.add(jMenuDeleteCategory);

        // Thêm MouseListener để hiển thị menu chuột phải
        jTableCategoryEdit.addMouseListener(new MouseAdapter() {
            @Override
            public void mousePressed(MouseEvent e) {
                showPopupMenuCGR(e, categoryPopupMenu);
            }

            @Override
            public void mouseReleased(MouseEvent e) {
                showPopupMenuCGR(e, categoryPopupMenu);
            }
        });
    }
    private void showPopupMenuCGR(MouseEvent e, JPopupMenu popupMenu) {
        if (e.isPopupTrigger() && jTableCategoryEdit.getSelectedRow() != -1) {
            popupMenu.show(e.getComponent(), e.getX(), e.getY());
        }
    }

    private void showEditPublisherDialog() {
        jDialogPublisherEdit.setTitle("Chỉnh sửa nhà xuất bản");
        jDialogPublisherEdit.setSize(550, 400);
        jDialogPublisherEdit.setLocationRelativeTo(this);
        jDialogPublisherEdit.setVisible(true);
    }

    private void loadPublishersToTable() {
        DefaultTableModel model = (DefaultTableModel) jTablePublisherEdit.getModel();
        model.setRowCount(0);

        PublisherDAO publisherDAO = new PublisherDAO();
        List<Publisher> publishers = publisherDAO.getAllPublishers();

        for (Publisher publisher : publishers) {
            model.addRow(new Object[]{publisher.getPublisherId(), publisher.getPublisherName()});
        }
    }

    private void setupPublisherTablePopupMenu() {
        JPopupMenu publisherPopupMenu = new JPopupMenu();
        publisherPopupMenu.add(jMenuDeletePublisher);

        jTablePublisherEdit.addMouseListener(new MouseAdapter() {
            @Override
            public void mousePressed(MouseEvent e) {
                showPopupMenuPLS(e, publisherPopupMenu);
            }

            @Override
            public void mouseReleased(MouseEvent e) {
                showPopupMenuPLS(e, publisherPopupMenu);
            }
        });
    }

    private void showPopupMenuPLS(MouseEvent e, JPopupMenu popupMenu) {
        if (e.isPopupTrigger() && jTablePublisherEdit.getSelectedRow() != -1) {
            popupMenu.show(e.getComponent(), e.getX(), e.getY());
        }
    }
/// Liên quan đến "Xóa sách"

    private boolean hasDeletePermission(String role) {
        return "quan_li".equals(role);
    }

    private boolean confirmDelete() {
        int response = JOptionPane.showConfirmDialog(
                this,
                "Bạn có chắc chắn muốn xóa sách này không?",
                "Xác nhận xóa",
                JOptionPane.YES_NO_OPTION,
                JOptionPane.WARNING_MESSAGE
        );
        return response == JOptionPane.YES_OPTION;
    }

    private void deleteBook(int bookId, int selectedRow) {
        try {
            BookDAO bookDao = new BookDAO();
            bookDao.deleteBookById(bookId); // Xóa sách khỏi cơ sở dữ liệu
            // Xóa sách khỏi bảng
            DefaultTableModel model = (DefaultTableModel) jTableBookInfo.getModel();
            model.removeRow(selectedRow);

            JOptionPane.showMessageDialog(
                    this,
                    "Đã xóa sách thành công!",
                    "Thông báo",
                    JOptionPane.INFORMATION_MESSAGE
            );
        } catch (Exception e) {
            JOptionPane.showMessageDialog(
                    this,
                    "Đã xảy ra lỗi khi xóa sách!",
                    "Lỗi",
                    JOptionPane.ERROR_MESSAGE
            );
            e.printStackTrace();
        }
    }
/// Liên quan đến "Cập nhật thông tin sách"

    public void showUpdateDialog() {
        jDialogItemUpdate.setTitle("Cập nhật thông tin sách");
        jDialogItemUpdate.setSize(550, 500);
        jDialogItemUpdate.setLocationRelativeTo(this);
        jDialogItemUpdate.setVisible(true);
    }

    public void closeUpdateDialog() {
        jDialogItemUpdate.dispose();
    }
    // Tải dữ liệu lên ComboBoUpdate
    private Map<String, Category> CategoryMap = new HashMap<>();
    private Map<String, Publisher> PublisherMap = new HashMap<>();

    public void loadInfoToComboBoxUD() {
        CategoryDAO categoryDAO = new CategoryDAO();
        List<Category> categories = categoryDAO.getAllCategories();

        // Xóa dữ liệu cũ trong JComboBox và Map
        CategoryMap.clear();
        jComboBoxcategoryUD.removeAllItems();

        // Thêm dữ liệu mới
        for (Category category : categories) {
            String categoryName = category.getCategory();
            jComboBoxcategoryUD.addItem(categoryName);
            CategoryMap.put(categoryName, category);
        }

        PublisherDAO publisherDAO = new PublisherDAO();
        List<Publisher> publishers = publisherDAO.getAllPublishers();

        PublisherMap.clear();
        jComboBoxpublisherUD.removeAllItems();

        for (Publisher publisher : publishers) {
            String publisherName = publisher.getPublisherName();
            jComboBoxpublisherUD.addItem(publisherName);
            PublisherMap.put(publisherName, publisher);
        }
    }

    public void setUpdateDialogFields(String title, String author, String categoryName, String publisherName, int yearPublished, int quantity) {
        jTextFieldtitleUD.setText(title);
        jTextFieldauthorUD.setText(author);
        jComboBoxcategoryUD.setSelectedItem(categoryName);
        jComboBoxpublisherUD.setSelectedItem(publisherName);
        jTextFieldyearPublishedUD.setText(String.valueOf(yearPublished));
        jTextFieldquantityUD.setText(String.valueOf(quantity));
    }

    public void clearUpdateButtonListeners() {
        for (java.awt.event.ActionListener al : jButtonUpdate.getActionListeners()) {
            jButtonUpdate.removeActionListener(al);
        }
    }

    public void addUpdateButtonListener(java.awt.event.ActionListener listener) {
        jButtonUpdate.addActionListener(listener);
    }

    public String getUpdatedTitle() {
        return jTextFieldtitleUD.getText();
    }

    public String getUpdatedAuthor() {
        return jTextFieldauthorUD.getText();
    }

    public Category getSelectedCategory() {
        return CategoryMap.get((String) jComboBoxcategoryUD.getSelectedItem());
    }

    public Publisher getSelectedPublisher() {
        return PublisherMap.get((String) jComboBoxpublisherUD.getSelectedItem());
    }

    public int getUpdatedYearPublished() {
        return Integer.parseInt(jTextFieldyearPublishedUD.getText());
    }

    public int getUpdatedQuantity() {
        return Integer.parseInt(jTextFieldquantityUD.getText());
    }

    private void jButtonBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonBackActionPerformed

       String loggedInUsername = SessionManager.getCurrentUsername();

    if (!loggedInUsername.isEmpty()) {
        this.dispose(); 
        new Giaodienthuhai(loggedInUsername).setVisible(true); // Mở giao diện thu hai
    } else {
        JOptionPane.showMessageDialog(this, "Vui lòng đăng nhập trước!");
    }
    }//GEN-LAST:event_jButtonBackActionPerformed

    private void jButtonAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAddActionPerformed
        String title = jTextFieldtitle.getText().trim();
        String author = jTextFieldauthor.getText().trim();
        String selectedCategoryName = (String) jComboBoxcategory.getSelectedItem();
        String selectedPublisherName = (String) jComboBoxpublisher.getSelectedItem();
        String yearPublishedStr = jTextFieldyearPublished.getText().trim();
        String quantityStr = jTextFieldquantity.getText().trim();

        controller.addBook(title, author, selectedCategoryName, selectedPublisherName, yearPublishedStr, quantityStr, categoryMap, publisherMap);
    }//GEN-LAST:event_jButtonAddActionPerformed
    public DefaultTableModel getBookTableModel() {
        return (DefaultTableModel) jTableBookInfo.getModel();
    }

    public void closeAddDialog() {
        jDialogItemAdd.dispose();
    }

    // Thêm Publisher
    private void jButtonAddPublisherActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAddPublisherActionPerformed
        String publisherName = jTextFieldAddPublisher.getText().trim();
        controller.addPublisher(publisherName);
    }//GEN-LAST:event_jButtonAddPublisherActionPerformed
    public void clearPublisherInputField() {
        jTextFieldAddPublisher.setText("");
    }

    public DefaultTableModel getPublisherTableModel() {
        return (DefaultTableModel) jTablePublisherEdit.getModel();
    }

    // Thêm Category
    private void jButtonAddCateGoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAddCateGoryActionPerformed
        String categoryName = jTextFieldAddCategory.getText().trim();
        controller.addCategory(categoryName);
    }//GEN-LAST:event_jButtonAddCateGoryActionPerformed
    public void clearCategoryInputField() {
        jTextFieldAddCategory.setText("");
    }

    public DefaultTableModel getCategoryTableModel() {
        return (DefaultTableModel) jTableCategoryEdit.getModel();
    }

    // Nút tìm kiếm Sách
    private void jButtonSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSearchActionPerformed
        try {
            // Thu thập các tiêu chí tìm kiếm từ giao diện
            String bookId = jTextFieldBookID.getText().trim();
            String title = jTextFieldTitle.getText().trim();
            String author = jTextFieldAuthor.getText().trim();

            Category category = MapCategory.get((String) jComboBoxCategory.getSelectedItem());
            Publisher publisher = MapPublisher.get((String) jComboBoxPublisher.getSelectedItem());

            // Gọi phương thức tìm kiếm từ BookController
            List<Book> searchResults = controller.searchBooks(bookId, title, author, category, publisher);

            // Cập nhật bảng kết quả
            updateBookTable(searchResults);

        } catch (IllegalArgumentException e) {
            // Xử lý lỗi (nếu mã sách không phải số hoặc lỗi khác)
            JOptionPane.showMessageDialog(this, e.getMessage(), "Lỗi", JOptionPane.ERROR_MESSAGE);
        } catch (Exception e) {
            // Xử lý lỗi chung
            JOptionPane.showMessageDialog(this, "Đã xảy ra lỗi khi tìm kiếm: " + e.getMessage(), "Lỗi", JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
        }

    }//GEN-LAST:event_jButtonSearchActionPerformed

    // Hiện DialogAddBook
    private void jMenuItemAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemAddActionPerformed

        jDialogItemAdd.setTitle("Thêm sách mới");
        jDialogItemAdd.setSize(550, 450);
        jDialogItemAdd.setLocationRelativeTo(BookGUI.this);
        resetInputFields();
        loadInfoToComboBoxAdd();
        jDialogItemAdd.setVisible(true);

    }//GEN-LAST:event_jMenuItemAddActionPerformed
    // Tải dữ liệu lên ComboBoxAdd
    private Map<String, Category> categoryMap = new HashMap<>();
    private Map<String, Publisher> publisherMap = new HashMap<>();

    private void loadInfoToComboBoxAdd() {
        CategoryDAO categoryDAO = new CategoryDAO();
        List<Category> categories = categoryDAO.getAllCategories();

        // Xóa dữ liệu cũ trong JComboBox và Map
        categoryMap.clear();
        jComboBoxcategory.removeAllItems();

        // Thêm dữ liệu mới
        for (Category category : categories) {
            String categoryName = category.getCategory(); // Giả sử Category có phương thức getName()
            jComboBoxcategory.addItem(categoryName);  // Hiển thị tên danh mục
            categoryMap.put(categoryName, category);  // Ánh xạ tên -> đối tượng Category
        }
        PublisherDAO publisherDAO = new PublisherDAO();
        List<Publisher> publishers = publisherDAO.getAllPublishers();
        // Xóa dữ liệu cũ trong JComboBox và Map
        publisherMap.clear();
        jComboBoxpublisher.removeAllItems();

        // Thêm dữ liệu mới
        for (Publisher publisher : publishers) {
            String publisherName = publisher.getPublisherName();
            jComboBoxpublisher.addItem(publisherName);
            publisherMap.put(publisherName, publisher);
        }
    }

    // Xóa Publisher
    private void jMenuDeletePublisherActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuDeletePublisherActionPerformed
        int selectedRow = jTablePublisherEdit.getSelectedRow();
        controller.deletePublisher(selectedRow, role);
    }//GEN-LAST:event_jMenuDeletePublisherActionPerformed
    public String getPublisherIdAt(int selectedRow) {
        return jTablePublisherEdit.getValueAt(selectedRow, 0).toString();
    }

    public void removePublisherRow(int selectedRow) {
        ((DefaultTableModel) jTablePublisherEdit.getModel()).removeRow(selectedRow);
    }
    
    // Xoá Category
    private void jMenuDeleteCategoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuDeleteCategoryActionPerformed
        int selectedRow = jTableCategoryEdit.getSelectedRow();
        controller.deleteCategory(selectedRow, role);
    }//GEN-LAST:event_jMenuDeleteCategoryActionPerformed

    public String getCategoryIdAt(int selectedRow) {
        return jTableCategoryEdit.getValueAt(selectedRow, 0).toString();
    }

    public void removeCategoryRow(int selectedRow) {
        ((DefaultTableModel) jTableCategoryEdit.getModel()).removeRow(selectedRow);
    }

    private void resetInputFields() {
        // Xóa nội dung trong JTextField
        jTextFieldtitle.setText("");
        jTextFieldauthor.setText("");
        jTextFieldyearPublished.setText("");
        jTextFieldquantity.setText("");

        // Đặt lại JComboBox về giá trị đầu tiên (giả sử "Tất cả" là giá trị đầu tiên)
        if (jComboBoxcategory.getItemCount() > 0) {
            jComboBoxcategory.setSelectedIndex(0);
        }
        if (jComboBoxpublisher.getItemCount() > 0) {
            jComboBoxpublisher.setSelectedIndex(0);
        }
    }

    public void refreshBookTable() {
        // Xóa toàn bộ dữ liệu hiện tại trong bảng
        DefaultTableModel model = (DefaultTableModel) jTableBookInfo.getModel();
        model.setRowCount(0);

        BookDAO bookDao = new BookDAO();
        List<Book> books = bookDao.getAllBooks();

        // Thêm dữ liệu của từng cuốn sách vào bảng
        for (Book book : books) {
            Object[] rowData = {
                book.getBookId(),
                book.getTitle(),
                book.getAuthor(),
                book.getCategory(),
                book.getPublisher(),
                book.getYearPublished(),
                book.getQuantity()
            };
            model.addRow(rowData);
        }
    }

    private void updateBookTable(List<Book> searchResults) {
        DefaultTableModel model = (DefaultTableModel) jTableBookInfo.getModel();
        model.setRowCount(0);  // Xóa tất cả các hàng hiện tại trong bảng

        for (Book book : searchResults) {
            model.addRow(new Object[]{
                book.getBookId(),
                book.getTitle(),
                book.getAuthor(),
                book.getCategory(),
                book.getPublisher(),
                book.getYearPublished(),
                book.getQuantity()
            });
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(BookGUI.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(BookGUI.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(BookGUI.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(BookGUI.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>


        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                //new BookGUI().setVisible(true);

                BookGUI view = new BookGUI();
                view.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonAdd;
    private javax.swing.JButton jButtonAddCateGory;
    private javax.swing.JButton jButtonAddPublisher;
    private javax.swing.JButton jButtonBack;
    private javax.swing.JButton jButtonEdit;
    private javax.swing.JButton jButtonSearch;
    private javax.swing.JButton jButtonUpdate;
    private javax.swing.JComboBox<String> jComboBoxCategory;
    private javax.swing.JComboBox<String> jComboBoxPublisher;
    private javax.swing.JComboBox<String> jComboBoxcategory;
    private javax.swing.JComboBox<String> jComboBoxcategoryUD;
    private javax.swing.JComboBox<String> jComboBoxpublisher;
    private javax.swing.JComboBox<String> jComboBoxpublisherUD;
    private javax.swing.JDialog jDialogCategoryEdit;
    private javax.swing.JDialog jDialogItemAdd;
    private javax.swing.JDialog jDialogItemUpdate;
    private javax.swing.JDialog jDialogPublisherEdit;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JLabel jLabelAuthor;
    private javax.swing.JLabel jLabelBookID;
    private javax.swing.JLabel jLabelCategory;
    private javax.swing.JLabel jLabelPublisher;
    private javax.swing.JLabel jLabelTiTle;
    private javax.swing.JMenuItem jMenuDeleteCategory;
    private javax.swing.JMenuItem jMenuDeletePublisher;
    private javax.swing.JMenuItem jMenuItemAdd;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanelItemAdd;
    private javax.swing.JPanel jPanelItemUpdate;
    private javax.swing.JPanel jPanelSearch;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPaneBookInfo;
    private javax.swing.JScrollPane jScrollPaneTable;
    private javax.swing.JTable jTableBookInfo;
    private javax.swing.JTable jTableCategoryEdit;
    private javax.swing.JTable jTablePublisherEdit;
    private javax.swing.JTextField jTextFieldAddCategory;
    private javax.swing.JTextField jTextFieldAddPublisher;
    private javax.swing.JTextField jTextFieldAuthor;
    private javax.swing.JTextField jTextFieldBookID;
    private javax.swing.JTextField jTextFieldTitle;
    private javax.swing.JTextField jTextFieldauthor;
    private javax.swing.JTextField jTextFieldauthorUD;
    private javax.swing.JTextField jTextFieldquantity;
    private javax.swing.JTextField jTextFieldquantityUD;
    private javax.swing.JTextField jTextFieldtitle;
    private javax.swing.JTextField jTextFieldtitleUD;
    private javax.swing.JTextField jTextFieldyearPublished;
    private javax.swing.JTextField jTextFieldyearPublishedUD;
    // End of variables declaration//GEN-END:variables
}
